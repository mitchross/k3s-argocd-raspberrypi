configs:
  cm:
    create: true
    application.resourceTrackingMethod: "annotation+label"
  cmp:
    create: true
    plugins:
      kustomize-build-with-helm:
        generate:
          command: [ "sh", "-c" ]
          args: [ "kustomize build --enable-helm" ]
  params:
    server.insecure: true

crds:
  install: true
  # -- Keep CRDs on chart uninstall
  keep: false


repoServer:
  initContainers:
#    - name: ghcr-auth
#      image: '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
#      securityContext:
#        runAsNonRoot: true
#        runAsUser: 999
#        allowPrivilegeEscalation: false
#        readOnlyRootFilesystem: true
#        seccompProfile:
#          type: RuntimeDefault
#        capabilities:
#          drop: [ "ALL" ]
#      env:
#        - name: HELM_CONFIG_HOME
#          value: /helm-auth
#        - name: HELM_REGISTRY_CONFIG
#          value: /helm-auth/config.json
#        - name: GHCR_USERNAME
#          valueFrom:
#            secretKeyRef:
#              name: argocd-ghcr-helm-credentials
#              key: username
#        - name: GHCR_PASSWORD
#          valueFrom:
#            secretKeyRef:
#              name: argocd-ghcr-helm-credentials
#              key: password
#      volumeMounts:
#        - name: registry-auth-dir
#          mountPath: /helm-auth
#      command:
#        - /bin/bash
#        - -exc
#        - 'echo -n $GHCR_PASSWORD | helm registry login ghcr.io --username $GHCR_USERNAME --password-stdin -'
#    - name: docker-auth
#      image: '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
#      securityContext:
#        runAsNonRoot: true
#        runAsUser: 999
#        allowPrivilegeEscalation: false
#        readOnlyRootFilesystem: true
#        seccompProfile:
#          type: RuntimeDefault
#        capabilities:
#          drop: [ "ALL" ]
#      env:
#        - name: HELM_CONFIG_HOME
#          value: /helm-auth
#        - name: HELM_REGISTRY_CONFIG
#          value: /helm-auth/config.json
#        - name: DOCKER_USERNAME
#          valueFrom:
#            secretKeyRef:
#              name: argocd-docker-helm-credentials
#              key: username
#        - name: DOCKER_PASSWORD
#          valueFrom:
#            secretKeyRef:
#              name: argocd-docker-helm-credentials
#              key: password
#      volumeMounts:
#        - name: registry-auth-dir
#          mountPath: /helm-auth
#      command:
#        - /bin/bash
#        - -exc
#        - 'echo -n $DOCKER_PASSWORD | helm registry login docker.io --username $DOCKER_USERNAME --password-stdin -'
  extraContainers:
    - name: kustomize-build-with-helm
      command:
        - argocd-cmp-server
      image: '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop: [ "ALL" ]
      volumeMounts:
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        - name: cmp-kustomize-build-with-helm
          mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: kustomize-build-with-helm.yaml
        - mountPath: /tmp
          name: cmp-tmp
  #env:
  #  - name: HELM_REGISTRY_CONFIG
  #    value: /helm-auth/config.json
  volumes:
#    - name: registry-auth-dir
#      emptyDir: { }
    - name: cmp-kustomize-build-with-helm
      configMap:
        name: argocd-cmp-cm
    - name: cmp-tmp
      emptyDir: { }
#  volumeMounts:
#    - name: registry-auth-dir
#      mountPath: /helm-auth
  containerSecurityContext:
    readOnlyRootFilesystem: true

