apiVersion: v1
kind: Namespace
metadata:
  name: postgres
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster01
  namespace: postgres
spec:
  numberOfInstances: 2
  postgresql:
    parameters:
      password_encryption: scram-sha-256
    version: '16'
  preparedDatabases:
    authentik:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
    miniflux:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    ryot:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    vikunja:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
  teamId: acid
  volume:
    size: 4Gi
    storageClass: longhorn
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster01.authentik.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster01.authentik.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster01.authentik.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: authentik-owner-user.cluster01.credentials.postgresql.acid.zalan.do
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster01.miniflux.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster01.miniflux.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster01.miniflux.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: miniflux-owner-user.cluster01.credentials.postgresql.acid.zalan.do
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster01.ryot.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster01.ryot.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster01.ryot.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: ryot-owner-user.cluster01.credentials.postgresql.acid.zalan.do
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster01.vikunja.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster01.vikunja.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster01.vikunja.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: vikunja-owner-user.cluster01.credentials.postgresql.acid.zalan.do
---
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: cluster02
  namespace: postgres
spec:
  numberOfInstances: 1
  postgresql:
    parameters:
      password_encryption: scram-sha-256
    version: '16'
  preparedDatabases:
    datatestdb:
      defaultUsers: true
      extensions: {}
      schemas:
        data:
          defaultRoles: false
          defaultUsers: false
    publictestdb:
      defaultUsers: true
      extensions: {}
      schemas:
        public:
          defaultRoles: false
          defaultUsers: false
  teamId: acid
  volume:
    size: 2Gi
    storageClass: longhorn
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster02.publictestdb.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster02.publictestdb.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster02.publictestdb.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: publictestdb-owner-user.cluster02.credentials.postgresql.acid.zalan.do
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: cluster02.datatestdb.owner
  namespace: postgres
spec:
  data:
  - match:
      remoteRef:
        property: username
        remoteKey: postgres.cluster02.datatestdb.owner
      secretKey: username
  - match:
      remoteRef:
        property: password
        remoteKey: postgres.cluster02.datatestdb.owner
      secretKey: password
  refreshInterval: 5m
  secretStoreRefs:
  - kind: ClusterSecretStore
    name: 1password
  selector:
    secret:
      name: datatestdb-owner-user.cluster02.credentials.postgresql.acid.zalan.do
